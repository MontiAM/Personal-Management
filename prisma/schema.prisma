generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  username         String         @unique
  password         String
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @db.Timestamptz(6)
  resetToken       String?        @db.VarChar(255)
  resetTokenExpiry DateTime?      @db.Timestamp(6)
  transactions     transactions[]
  user_role        user_role[]
}

model transaction_type {
  trans_type_id             Int                    @id @default(autoincrement())
  trans_type_name           String                 @db.VarChar(50)
  trans_type_created_at     DateTime?              @default(now()) @db.Timestamptz(6)
  trans_type_updated_at     DateTime?              @default(now()) @db.Timestamptz(6)
  trans_type_classification String?                @db.Char(1)
  transaction_category      transaction_category[]
}

model transaction_category {
  trans_cat_id            Int              @id @default(autoincrement())
  trans_cat_name          String           @db.VarChar(100)
  trans_cat_trans_type_id Int
  trans_cat_status        String?          @default("Activo") @db.VarChar(20)
  trans_cat_description   String?
  trans_cat_created_at    DateTime?        @default(now()) @db.Timestamptz(6)
  trans_cat_updated_at    DateTime?        @default(now()) @db.Timestamptz(6)
  transaction_type        transaction_type @relation(fields: [trans_cat_trans_type_id], references: [trans_type_id])
  transactions            transactions[]
}

model payment_methods {
  pay_method_id   Int            @id @default(autoincrement())
  pay_method_name String         @unique @db.VarChar(50)
  transactions    transactions[] @relation("TransactionPaymentMethod")
}

model transactions {
  trans_id                Int                  @id @default(autoincrement())
  trans_date              DateTime             @db.Date
  trans_amount            Decimal              @db.Decimal(10, 2)
  trans_location          String?              @db.VarChar(100)
  trans_notes             String?
  trans_description       String?
  trans_cat_id            Int
  trans_user_id           Int
  trans_created_at        DateTime?            @default(now()) @db.Timestamptz(6)
  trans_updated_at        DateTime?            @default(now()) @db.Timestamptz(6)
  trans_payment_method_id Int?
  user                    User                 @relation(fields: [trans_user_id], references: [id], onDelete: Cascade)
  transaction_category    transaction_category @relation(fields: [trans_cat_id], references: [trans_cat_id])
  payment_methods         payment_methods?     @relation("TransactionPaymentMethod", fields: [trans_payment_method_id], references: [pay_method_id])
}

model role {
  rol_id     Int         @id @default(autoincrement())
  rol_name   String      @unique @db.VarChar(50)
  rol_status String?     @default("Activo") @db.VarChar(20)
  user_role  user_role[]
}

model user_role {
  uro_id      Int  @id @default(autoincrement())
  uro_user_id Int
  uro_rol_id  Int
  user        User @relation(fields: [uro_user_id], references: [id], onDelete: Cascade)
  role        role @relation(fields: [uro_rol_id], references: [rol_id], onDelete: Cascade)
}
